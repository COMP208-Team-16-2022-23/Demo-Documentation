import{_ as e,p as o,q as i,a1 as t}from"./framework-efe98465.js";const a={},l=t('<h1 id="节点编辑器" tabindex="-1"><a class="header-anchor" href="#节点编辑器" aria-hidden="true">#</a> 节点编辑器</h1><p>Node Editor 是一个完全的图形化数据处理工具。在这里你可以依照你的需求，在一个页面上对多个数据集同时应用多种数据处理方法。</p><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h2><ol><li>登录后，从顶部导航栏中点击 <strong>Node Editor</strong>，进入节点编辑界面。<!--can add link--></li><li>在任意空白处右键单击，呼出节点列表，左键点击节点名称，即可创造节点。</li></ol><p><img src="https://s2.loli.net/2023/04/12/z2YQULji1dhmvDw.png" alt="creating_nodes.png" style="zoom:67%;"><img src="https://s2.loli.net/2023/04/12/jyQYsKrTqDHOJNd.png" alt="creation_result" style="zoom:67%;"></p><p>可创造的节点从功能上可以分为三类：数据节点，处理节点和输出节点。关于节点更详细的描述见<a href="##%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8">节点列表</a>。</p><ol start="3"><li><p>建立处理流程，有几点需要注意：</p><ul><li>每个节点的输入接口在左边，输出接口在右边</li><li>一个<strong>输入</strong>接口<strong>只</strong>能连接一个节点，但一个输出接口可以连接多个节点，意味着一个流程中可以存在分支</li><li>一个流程中至少包含一个输出节点，以激活流程。否则流程不会运行</li></ul><p>下面我们将用一个 Data Node ，一个 Column Selection Node ，一个 Normalization Node 和一个 End Process Node 来建立一个简单的数据处理流程。</p></li></ol><img src="https://s2.loli.net/2023/04/12/KTYe615UVSAGc2D.png" alt="process_preparation" style="zoom:67%;"><p>接下来我们先将 4 个节点串联，以将它们全部激活，并在 Data 中选择公共数据集里的 <code>iris.csv</code> 进行处理。可以看到在 ColumnSelectionNode 中已经显示出 <code>iris.csv</code> 的各列名。</p><img src="https://s2.loli.net/2023/04/12/JPptOHZLS6Qlwa1.png" alt="process_1step" style="zoom:67%;"><p>在 ColumnSelectionNode 中我们填入 <code>sepal.length</code> ，在 Normalization 中我们选择 <code>Normalization Method</code> 为 <code>Min-Max</code> ，设置新文件名为 <code>sepal.length-minmax</code> ，最后连接 Data 和 Normalization ，一个处理流程即完成了。</p><p>处理结果会以 <code>sepal.length-minmax.csv</code> 上传到你的文件空间，可以在 My Data 中查看。</p><img src="https://s2.loli.net/2023/04/12/ZxXwWjh1BCFmdI7.png" alt="process_2step" style="zoom:67%;"><h2 id="节点列表" tabindex="-1"><a class="header-anchor" href="#节点列表" aria-hidden="true">#</a> 节点列表</h2><h3 id="数据节点" tabindex="-1"><a class="header-anchor" href="#数据节点" aria-hidden="true">#</a> 数据节点</h3><ul><li><p>Data Node</p><p>Data Node 在编辑器中提供处理所用的数据源。它拥有的一个下拉选项中会显示你目前拥有的数据集（包含你上传的和处理任务生成的）。</p></li><li><p>Column Selection Node</p><p>Column Selection Node 用来选择数据集中的列。当 Column Selection Node 在节点编辑器中被正确激活，在输入和输出接口之间会出现一行字符，显示其接收到的数据集所包含的所有列。显示行下方的输入栏用于选择你希望输出进行处理的列。列名之间用逗号分隔。</p></li></ul><h3 id="输出节点" tabindex="-1"><a class="header-anchor" href="#输出节点" aria-hidden="true">#</a> 输出节点</h3><p>输出节点是只有输入接口，没有输出接口的节点。在节点编辑器中，一个流程<strong>必须</strong>包含<strong>至少一个</strong>输出节点以激活此流程。否则流程中的 <strong>任何</strong>计算或操作都不会生效。</p><ul><li><p>End Node</p><p>End Node 是最基础的输出节点，但是是最推荐使用的输出节点。它没有任何输出显示，仅仅标志着流程中一个分支的结束。</p></li><li><p>Display Node</p><p>在 End Node 的基础上，将节点连接到 Display Node 可以显示当前节点的输出。编辑器中的大多数节点输出文件的储存结构。有时可 以用来查看流程中分支是否成功运行。但是仅使用 Display Node 而不使用 End Node 是不推荐的。</p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>我们不推荐单独使用 Display Node 的原因是该节点的显示并不是同步的。如果用 Display Node 代替 End Node 单独使用，但是连接后没有看到显示内容，并不一定意味着当前流程或分支中的操作失败。如果做了上述操作，需要在节点编辑器中新建一个节点来刷新显示。</p></div><h3 id="处理节点" tabindex="-1"><a class="header-anchor" href="#处理节点" aria-hidden="true">#</a> 处理节点</h3><p>当前节点编辑器中包含了7种处理节点，与 Data Processing 中的处理方法相同，各节点都由一种数据处理方法命名。每个处理节点都会包含：</p><ul><li>一个数据集输入接口，用来连接 Data Node 获取输入数据集</li><li>一个列输入接口，用来连接 Column Selection Node 获取输入处理列</li><li>一个文本输入，用于定义处理后的新文件名（不需要输入拓展名）</li><li>一个输出接口，用来输出处理后的数据集</li><li>一些参数选项，用于定义处理算法的参数</li></ul>',23),d=[l];function n(s,r){return o(),i("div",null,d)}const c=e(a,[["render",n],["__file","node-editor.html.vue"]]);export{c as default};
