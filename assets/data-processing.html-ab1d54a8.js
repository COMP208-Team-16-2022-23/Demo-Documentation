import{_ as d,a as s,b as h,c as l,d as c,e as p,f as _,g as u,h as m,i as g,j as f,k,l as b,m as x,n as w,o as E}from"./Example_Normalization-7b12f06b.js";import{_ as D,M as t,p as N,q as S,R as e,t as a,N as i,U as v,a1 as n}from"./framework-efe98465.js";const B={},T=n('<h1 id="数据处理" tabindex="-1"><a class="header-anchor" href="#数据处理" aria-hidden="true">#</a> 数据处理</h1><p>数据处理是使用 LCDA 分析实验数据的关键部分。因为你收集的数据可能会存在一些问题，譬如存在噪声、偏斜等问题，所以在进行数据分析之前，需要对数据进行处理。</p><p>本章节将介绍数据处理的步骤。无论您是新手还是有经验的用户，我们希望本章节能够为您提供有用的信息和指导，以便您能够使用 LCDA 获得准确可靠的结果。</p><h2 id="数据处理项目" tabindex="-1"><a class="header-anchor" href="#数据处理项目" aria-hidden="true">#</a> 数据处理项目</h2><h3 id="新建项目" tabindex="-1"><a class="header-anchor" href="#新建项目" aria-hidden="true">#</a> 新建项目</h3><p>在开始数据处理之前，需要新建一个数据处理项目。 您可以通过单击 <code>Data Processing</code> 界面右上角的 <code>NEW PROCESSING</code> 按钮来新建一个数据处理项目。</p><p><img src="'+s+'" alt=""></p>',7),A=e("code",null,"START PROCESSING",-1),M=n('<p>这里我们使用 <code>iris.csv</code> 数据集来演示数据处理的过程。</p><p><img src="'+h+'" alt=""></p><h3 id="继续编辑项目" tabindex="-1"><a class="header-anchor" href="#继续编辑项目" aria-hidden="true">#</a> 继续编辑项目</h3><p>如果您已经创建了一个数据处理项目，则数据处理界面会列出您所有的数据处理项目。您可以通过单击右侧的 <code>EDIT</code> 按钮来继续编辑已有的数据处理项目。</p><p><img src="'+l+'" alt=""></p><h3 id="删除项目" tabindex="-1"><a class="header-anchor" href="#删除项目" aria-hidden="true">#</a> 删除项目</h3><p>如果您不再需要某个数据处理项目，您可以通过单击右侧的 <code>DELETE</code> 按钮来删除该项目。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p><strong>注意</strong>：删除数据处理项目是永久性的操作，删除后无法恢复。这也会删除该项目中最后一次运行生成的数据集。</p></div><p><img src="'+c+'" alt=""></p><h2 id="数据处理步骤" tabindex="-1"><a class="header-anchor" href="#数据处理步骤" aria-hidden="true">#</a> 数据处理步骤</h2><ol><li><p>单击 <code>EDIT</code> 按钮或创建新数据处理项目后，会显示数据处理界面。在这里，您可以对数据进行处理。</p><p><img src="'+p+'" alt=""></p><p>在数据处理界面中，您可以在左侧看到数据处理算法的列表。您可以通过单击左侧的算法来选择要使用的算法，并在弹出的面板中设置算法的参数。每种算法的具体参数可能会有所不同，因此请参阅<a href="#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AE%97%E6%B3%95%E4%BB%8B%E7%BB%8D">数据处理算法介绍</a> 以获取有关如何设置它们的更多信息。</p><p><img src="'+_+'" alt=""></p></li><li><p>这里我们使用 <code>Outlier handling</code> 算法举例。在选择好参数后，您可以单击面板右下角的 <code>Start processing</code> 按钮来运行算法。</p><p><img src="'+u+'" alt=""></p></li><li><p>等待算法运行完成后，您可以在右侧看到算法的输出结果。</p><p><img src="'+m+'" alt=""></p></li><li><p>同时，新的数据集也会被保存到您的数据集中。您可以通过访问 <code>My Data</code> 页面来查看或下载您新的数据集。</p><p><img src="'+g+'" alt=""></p></li></ol><h2 id="数据处理算法介绍" tabindex="-1"><a class="header-anchor" href="#数据处理算法介绍" aria-hidden="true">#</a> 数据处理算法介绍</h2><h3 id="异常值处理-outlier-handling" tabindex="-1"><a class="header-anchor" href="#异常值处理-outlier-handling" aria-hidden="true">#</a> 异常值处理（Outlier handling）</h3><h4 id="算法描述" tabindex="-1"><a class="header-anchor" href="#算法描述" aria-hidden="true">#</a> 算法描述</h4><p>异常值处理算法用于识别和处理数据集中的异常值。在统计学中，异常值是指明显不同于其他观测值的数据点，可能是由实验误差或其他因素引起的。异常值可能会在统计分析中引起严重问题，并影响结果的准确性和可靠性。因此，异常值处理算法对于识别和处理这些问题数据点至关重要。这些算法可以帮助提高数据集的质量，并最终导致更准确和可靠的分析结果。</p><p>异常值处理算法可以采用多种方法进行识别和处理，包括基于统计学的方法、基于机器学习的方法和基于深度学习的方法等。常用的统计学方法包括3σ原则、箱线图法等；基于机器学习的方法包括局部离群点因子（LOF）、孤立森林（Isolation Forest）等；而基于深度学习的方法则包括自编码器（Autoencoder）等。</p><p>在处理异常值时，需要根据具体情况选择合适的算法。有时，一些异常值可能包含有用的信息，因此需要进行仔细的考虑和处理。总的来说，通过合适的异常值处理算法，可以提高数据集的质量和结果的准确性。</p>',17),O={href:"https://en.wikipedia.org/wiki/Outlier",target:"_blank",rel:"noopener noreferrer"},F=e("h4",{id:"算法参数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法参数","aria-hidden":"true"},"#"),a(" 算法参数")],-1),I=e("code",null,"Detection method",-1),L={href:"https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule",target:"_blank",rel:"noopener noreferrer"},R={href:"https://en.wikipedia.org/wiki/Interquartile_range",target:"_blank",rel:"noopener noreferrer"},y={href:"https://en.wikipedia.org/wiki/Median_absolute_deviation",target:"_blank",rel:"noopener noreferrer"},q=e("li",null,[e("code",null,"Peocessing method"),a("：异常值处理方法。目前支持 "),e("code",null,"set to null"),a(", "),e("code",null,"set to mean"),a(", 和 "),e("code",null,"set to median"),a(" 三种方法。")],-1),C=n('<h4 id="算法示例" tabindex="-1"><a class="header-anchor" href="#算法示例" aria-hidden="true">#</a> 算法示例</h4><p><img src="'+f+'" alt=""></p><h3 id="缺失值处理-missing-value-handling" tabindex="-1"><a class="header-anchor" href="#缺失值处理-missing-value-handling" aria-hidden="true">#</a> 缺失值处理（Missing value handling）</h3><h4 id="算法描述-1" tabindex="-1"><a class="header-anchor" href="#算法描述-1" aria-hidden="true">#</a> 算法描述</h4><p>缺失值处理是指对数据集中存在的缺失值进行处理的过程。在数据分析和机器学习任务中，缺失值是常见的问题。缺失值的存在可能是由于数据收集过程中的错误、人为遗漏或者其他因素导致的。如果不对缺失值进行处理，将会影响数据分析和机器学习模型的准确性和可靠性。</p><p>缺失值处理的方法包括删除、插补和预测等。删除是指直接将包含缺失值的数据行或列删除。这种方法可能会导致数据量减少，但可能会使数据集变得不完整，丢失有用的信息。插补是指使用已有的数据来推断缺失值。插补方法包括均值插补、中位数插补、回归插补和插值法等。预测是指使用机器学习模型来预测缺失值。这种方法需要先用已有数据训练机器学习模型，然后使用该模型来预测缺失值。</p><p>在选择缺失值处理方法时，需要考虑数据的性质、数据缺失的原因以及处理方法可能引入的偏差等因素。通过合适的缺失值处理方法，可以提高数据分析和机器学习模型的准确性和可靠性。</p>',7),W={href:"https://en.wikipedia.org/wiki/Missing_data",target:"_blank",rel:"noopener noreferrer"},P=n('<h4 id="算法参数-1" tabindex="-1"><a class="header-anchor" href="#算法参数-1" aria-hidden="true">#</a> 算法参数</h4><ul><li><code>identification method</code>：缺失值检测方法。目前支持 <code>empty</code>, <code>space</code>, <code>None</code> 和 <code>Non-numeric</code> 四种方法。</li><li><code>filling method</code>：缺失值处理方法。目前支持 <code>mean</code>, <code>median</code>, 和 <code>mode</code> 三种方法。</li></ul><h4 id="算法示例-1" tabindex="-1"><a class="header-anchor" href="#算法示例-1" aria-hidden="true">#</a> 算法示例</h4><p><img src="'+k+'" alt=""></p><h3 id="缩尾截尾处理-tail-shrinkage-and-truncation-processing" tabindex="-1"><a class="header-anchor" href="#缩尾截尾处理-tail-shrinkage-and-truncation-processing" aria-hidden="true">#</a> 缩尾截尾处理（Tail shrinkage and truncation processing）</h3><h4 id="算法描述-2" tabindex="-1"><a class="header-anchor" href="#算法描述-2" aria-hidden="true">#</a> 算法描述</h4><p>样本数据足够多时为了剔除一些极端值对研究的影响，一般会对连续变量进行缩尾/截尾处理。缩尾截尾处理的目的是使数据集中的极端值更加接近于中心值，从而使得数据集更加符合正态分布。会在从小到大排列后，处理超出变量特定百分位范围的数值，标准为低于下限和超出上限。缩尾是替换为其特定百分位数值，截尾是直接删除值。</p>',7),z={href:"https://en.wikipedia.org/wiki/Truncation_(statistics)",target:"_blank",rel:"noopener noreferrer"},V={href:"https://en.wikipedia.org/wiki/Shrinkage_(statistics)",target:"_blank",rel:"noopener noreferrer"},U=n('<h4 id="算法参数-2" tabindex="-1"><a class="header-anchor" href="#算法参数-2" aria-hidden="true">#</a> 算法参数</h4><ul><li><code>method_selection</code>：缩尾截尾处理方法。目前支持 <code>tail_shrinkage</code> 和 <code>tail_truncation</code> 两种方法。</li><li><code>upper_limit</code>：缩尾截尾处理的上限。类型为数值。</li><li><code>lower_limit</code>：缩尾截尾处理的下限。类型为数值。</li><li><code>processing_method</code>：缩尾截尾处理方法。目前支持 <code>delete_value</code> 和 <code>delete_row</code> 两种方法。</li></ul><h4 id="算法示例-2" tabindex="-1"><a class="header-anchor" href="#算法示例-2" aria-hidden="true">#</a> 算法示例</h4><p><img src="'+b+'" alt=""></p><h3 id="数据转换-data-transformation" tabindex="-1"><a class="header-anchor" href="#数据转换-data-transformation" aria-hidden="true">#</a> 数据转换 （Data transformation）</h3><h4 id="算法描述-3" tabindex="-1"><a class="header-anchor" href="#算法描述-3" aria-hidden="true">#</a> 算法描述</h4><p>数据变换是指将通过替换/将数据从一种表示形式转换为另一种表示形式，以提取或改变其中的信息或特征。在数据分析和机器学习领域中，数据变换是数据预处理的一个重要步骤，可以用于数据降维、特征提取、异常检测、数据平滑等多种任务。</p>',7),G={href:"https://en.wikipedia.org/wiki/Data_transformation_(statistics)",target:"_blank",rel:"noopener noreferrer"},j=e("h4",{id:"算法参数-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法参数-3","aria-hidden":"true"},"#"),a(" 算法参数")],-1),Q=e("code",null,"transform_method",-1),Z={href:"https://en.wikipedia.org/wiki/Fast_Fourier_transform",target:"_blank",rel:"noopener noreferrer"},H=n('<h4 id="算法示例-3" tabindex="-1"><a class="header-anchor" href="#算法示例-3" aria-hidden="true">#</a> 算法示例</h4><p><img src="'+x+'" alt=""></p><h3 id="数据降维-dimension-reduction" tabindex="-1"><a class="header-anchor" href="#数据降维-dimension-reduction" aria-hidden="true">#</a> 数据降维 （Dimension reduction）</h3><h4 id="算法描述-4" tabindex="-1"><a class="header-anchor" href="#算法描述-4" aria-hidden="true">#</a> 算法描述</h4><p>数据降维是指将高维度数据集中的数据映射到低维度空间中，同时尽可能地保留原始数据集的特征信息。在数据分析和机器学习领域中，高维数据集的存在经常会导致计算复杂度的大幅增加，同时也会使得数据的可视化和解释性变得困难。因此，数据降维可以有效地减少数据集的维度，提高数据的处理效率和可解释性，同时也能够降低过拟合的风险，提高机器学习模型的泛化能力。</p>',5),J={href:"https://en.wikipedia.org/wiki/Dimensionality_reduction",target:"_blank",rel:"noopener noreferrer"},K=e("h4",{id:"算法参数-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法参数-4","aria-hidden":"true"},"#"),a(" 算法参数")],-1),X=e("code",null,"method",-1),Y={href:"https://en.wikipedia.org/wiki/Principal_component_analysis",target:"_blank",rel:"noopener noreferrer"},$={href:"https://en.wikipedia.org/wiki/Linear_discriminant_analysis",target:"_blank",rel:"noopener noreferrer"},ee=n("<li><code>n_components</code>：主成分数。类型为数值。当 <code>method</code> 为 <code>PCA</code> 时，<code>n_components</code> 为主成分数。当 <code>method</code> 为 <code>LDA</code> 时，<code>n_components</code> 为线性判别数。</li>",1),ae=n('<h4 id="算法示例-4" tabindex="-1"><a class="header-anchor" href="#算法示例-4" aria-hidden="true">#</a> 算法示例</h4><p><img src="'+w+'" alt=""></p><h3 id="样本均衡-sample-balancing" tabindex="-1"><a class="header-anchor" href="#样本均衡-sample-balancing" aria-hidden="true">#</a> 样本均衡（Sample balancing）</h3><h4 id="算法描述-5" tabindex="-1"><a class="header-anchor" href="#算法描述-5" aria-hidden="true">#</a> 算法描述</h4><p>样本平衡是指对数据集中的样本进行调整，使得各个类别的样本数量尽可能地均衡分布。在机器学习和数据分析中，样本平衡是一个重要的预处理步骤。这是因为当数据集中某些类别的样本数量比其他类别的样本数量要多很多时，会导致模型的训练和预测结果存在偏差，影响模型的性能和准确性。</p><p>样本平衡可以通过多种方法来实现，比如下采样、过采样、合成样本等。下采样是指从样本数量较多的类别中随机地去除一些样本，使得样本数量与其他类别相当。过采样是指通过对样本数量较少的类别进行复制或合成新的样本来增加该类别的样本数量。合成样本是指使用生成模型（如SMOTEENN）生成新的样本数据，从而增加样本数量并使不同类别的样本数量更加均衡。</p><p>样本平衡可以提高模型的性能和准确性，并降低由于样本不平衡带来的偏差。但是，过度的样本平衡也可能会导致过拟合问题，因此需要根据具体情况进行调整和平衡。</p>',7),ie={href:"https://en.wikipedia.org/wiki/Oversampling_and_undersampling_in_data_analysis",target:"_blank",rel:"noopener noreferrer"},re=e("h4",{id:"算法参数-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法参数-5","aria-hidden":"true"},"#"),a(" 算法参数")],-1),ne=e("code",null,"balancing_method",-1),te=e("code",null,"undersample",-1),oe={href:"https://imbalanced-learn.org/stable/references/generated/imblearn.under_sampling.RandomUnderSampler.html",target:"_blank",rel:"noopener noreferrer"},de=e("code",null,"oversample",-1),se={href:"https://imbalanced-learn.org/stable/references/generated/imblearn.over_sampling.RandomOverSampler.html",target:"_blank",rel:"noopener noreferrer"},he=e("code",null,"combined",-1),le={href:"https://imbalanced-learn.org/stable/references/generated/imblearn.combine.SMOTEENN.html",target:"_blank",rel:"noopener noreferrer"},ce=n('<h4 id="算法示例-5" tabindex="-1"><a class="header-anchor" href="#算法示例-5" aria-hidden="true">#</a> 算法示例</h4><p><img src="'+E+'" alt=""></p><h3 id="标准化-normalization" tabindex="-1"><a class="header-anchor" href="#标准化-normalization" aria-hidden="true">#</a> 标准化（Normalization）</h3><h4 id="算法描述-6" tabindex="-1"><a class="header-anchor" href="#算法描述-6" aria-hidden="true">#</a> 算法描述</h4><p>数据标准化是指对原始数据进行处理，使其符合一定的标准或规范，以便于进行比较和分析。数据标准化常见的方法是将数据转换为均值为0，方差为1的标准正态分布或将数据缩放到一定的范围内。</p><p>数据标准化的主要目的是消除数据中的单位差异和数量级差异，从而使得不同变量之间的比较更加公平。例如，如果两个变量的数值范围相差很大，那么它们之间的比较可能会受到较大的误差。通过对数据进行标准化，可以消除这种误差，使得数据更加可靠和可解释。</p><p>数据标准化在许多数据分析和机器学习任务中都是必要的步骤，例如聚类分析、回归分析、神经网络等。常用的数据标准化方法包括z-score标准化、min-max标准化、均值方差归一化等。</p>',7),pe={href:"https://en.wikipedia.org/wiki/Normalization_(statistics)",target:"_blank",rel:"noopener noreferrer"},_e=e("h4",{id:"算法参数-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法参数-6","aria-hidden":"true"},"#"),a(" 算法参数")],-1),ue=e("code",null,"Method",-1),me={href:"https://en.wikipedia.org/wiki/Feature_scaling",target:"_blank",rel:"noopener noreferrer"},ge={href:"https://en.wikipedia.org/wiki/Standard_score",target:"_blank",rel:"noopener noreferrer"},fe=e("h4",{id:"算法示例-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#算法示例-6","aria-hidden":"true"},"#"),a(" 算法示例")],-1),ke=e("p",null,[e("img",{src:d,alt:""})],-1);function be(xe,we){const o=t("RouterLink"),r=t("ExternalLinkIcon");return N(),S("div",null,[T,e("p",null,[a("在弹出的界面中，您需要选择一个数据集（想要选择您自己的数据集？ 请参考 "),i(o,{to:"/zh/guide/my-data.html#%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6"},{default:v(()=>[a("My Data")]),_:1}),a(" 用户手册查看如何上传数据集）。然后点击右下角的 "),A,a(" 按钮来开始数据处理。 系统会自动为您创建一个数据处理项目。")]),M,e("blockquote",null,[e("p",null,[e("a",O,[a("Outlier - Wikipedia"),i(r)])])]),F,e("ul",null,[e("li",null,[I,a("：异常值检测方法。目前支持 "),e("a",L,[a("3-sigma"),i(r)]),a(", "),e("a",R,[a("IQR"),i(r)]),a(", 和 "),e("a",y,[a("MAD"),i(r)]),a(" 三种方法。")]),q]),C,e("blockquote",null,[e("p",null,[e("a",W,[a("Missing data - Wikipedia"),i(r)])])]),P,e("blockquote",null,[e("p",null,[e("a",z,[a("Truncation (statistics) - Wikipedia"),i(r)])]),e("p",null,[e("a",V,[a("Shrinkage (statistics) - Wikipedia"),i(r)])])]),U,e("blockquote",null,[e("p",null,[e("a",G,[a("Data transformation (statistics) - Wikipedia"),i(r)])])]),j,e("ul",null,[e("li",null,[Q,a("：数据转换方法。目前支持 "),e("a",Z,[a("FFT"),i(r)]),a(" 和 IFFT (Inverse Fast Fourier Transform) 两种方法。")])]),H,e("blockquote",null,[e("p",null,[e("a",J,[a("Dimensionality reduction - Wikipedia"),i(r)])])]),K,e("ul",null,[e("li",null,[X,a("：数据降维方法。目前支持 "),e("a",Y,[a("PCA"),i(r)]),a(" 和 "),e("a",$,[a("LDA"),i(r)]),a(" 两种方法。")]),ee]),ae,e("blockquote",null,[e("p",null,[e("a",ie,[a("Oversampling and undersampling in data analysis - Wikipedia"),i(r)])])]),re,e("ul",null,[e("li",null,[ne,a(" ：样本均衡方法。目前支持 "),te,a(" ("),e("a",oe,[a("RandomUnderSampler"),i(r)]),a(")， "),de,a(" ("),e("a",se,[a("RandomOverSampler"),i(r)]),a(") 和 "),he,a(" （"),e("a",le,[a("SMOTEENN"),i(r)]),a(" ）三种方法。")])]),ce,e("blockquote",null,[e("p",null,[e("a",pe,[a("Normalization (statistics) - Wikipedia"),i(r)])])]),_e,e("ul",null,[e("li",null,[ue,a("：标准化方法。目前支持 "),e("a",me,[a("Min_Max"),i(r)]),a(" 和 "),e("a",ge,[a("Z_Score"),i(r)]),a(" 两种方法。")])]),fe,ke])}const Ne=D(B,[["render",be],["__file","data-processing.html.vue"]]);export{Ne as default};
